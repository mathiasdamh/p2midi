{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/Header.ts","webpack:///./node_modules/midi-file/index.js","webpack:///./src/BinarySearch.ts","webpack:///./src/Track.ts","webpack:///./src/ControlChange.ts","webpack:///./src/Midi.ts","webpack:///./node_modules/midi-file/lib/midi-parser.js","webpack:///./node_modules/midi-file/lib/midi-writer.js","webpack:///./src/Encode.ts","webpack:///./node_modules/array-flatten/array-flatten.js","webpack:///./src/ControlChanges.ts","webpack:///./src/PitchBend.ts","webpack:///./src/Instrument.ts","webpack:///./src/InstrumentMaps.ts","webpack:///./src/Note.ts"],"names":["root","factory","exports","module","define","amd","a","i","self","this","enumerable","get","getter","value","key","bind","Object","prototype","hasOwnProperty","call","object","property","privatePPQMap","WeakMap","keySignatureKeys","midiData","tempos","timeSignatures","keySignatures","meta","name","set","header","ticksPerBeat","tracks","forEach","event","type","push","ticks","absoluteTime","timeSignature","numerator","denominator","bpm","microsecondsPerBeat","scale","text","update","currentTime","lastEventBeats","sort","b","index","lastBPM","beats","ppq","elapsedSeconds","time","lastEvent","elapsedMeasures","measures","ticksToSeconds","search","tempo","tempoTime","elapsedBeats","ticksToMeasures","timeSigEvent","secondsToTicks","seconds","Math","round","toJSON","map","t","fromJSON","json","assign","setTempo","Header","parseMidi","writeMidi","array","prop","beginning","len","length","end","midPoint","floor","nextEvent","splice","privateHeaderMap","trackData","notes","controlChanges","createControlChanges","pitchBends","nameEvent","find","e","instrument","Instrument","channel","noteOns","filter","noteOffs","currentNote","shift","offIndex","findIndex","note","noteNumber","noteOff","addNote","durationTicks","midi","noteOffVelocity","velocity","addCC","number","controllerType","addPitchBend","pow","props","Note","insert","cc","ControlChange","Array","isArray","pb","PitchBend","lastNote","duration","undefined","n","c","Track","controlChangeNames","1","2","4","5","7","8","10","64","65","66","67","68","84","controlChangeIds","keys","reduce","obj","privateCCNumberMap","midiArray","ArrayBuffer","Uint8Array","track","currentTicks","deltaTime","newTracks","defaultTrack","trackMap","Map","currentProgram","fill","targetTrack","programNumber","trackKey","has","size","splitTracks","format","fromUrl","url","fetch","response","ok","arrayBuffer","Midi","Error","durations","max","addTrack","toArray","encode","trackJSON","clone","parseTrack","data","lastEventTypeByte","p","Parser","events","eof","readEvent","readVarInt","eventTypeByte","readUInt8","readBytes","metatypeByte","readUInt16","readString","port","readUInt24","hourByte","frameRate","0","hour","min","sec","frame","subFrame","metronome","thirtyseconds","readInt8","param1","running","eventType","byte9","amount","buffer","bufferLen","pos","result","u","readInt16","readInt24","readUInt32","bytes","slice","String","fromCharCode","apply","readChunk","id","headerChunk","numTracks","timeDivision","framesPerSecond","ticksPerFrame","parseHeader","trackChunk","writeTrack","w","opts","Writer","writeEvent","useByte9ForNoteOff","writeChunk","writeVarInt","writeUInt8","writeUInt16","writeString","writeUInt24","24","25","29","30","log","LN2","writeInt8","writeBytes","value14","lsb14","msb14","v","b0","b1","writeInt16","b2","writeInt24","writeUInt32","b3","writeInt32","arr","concat","str","codePointAt","reverse","h","writeHeader","encodeNotes","encodeNote","encodeControlChange","encodeInstrument","keySig","keyIndex","indexOf","encodeKeySignature","textEvent","encodeTempo","timeSig","encodeTimeSignature","encodeControlChanges","encodePitchBend","encodePitchBends","lastTime","flattenFrom","flattenDown","flattenFromDepth","depth","TypeError","flattenDownDepth","from","fromDepth","Proxy","target","handler","privateTrackMap","programChange","percussion","DrumKitByPatchID","instrumentByPatchID","patchNumber","InstrumentFamilyByID","family","16","32","40","48","56","midiToPitchClass","regexp","noteToScaleIndex","pitchToMidi","cbb","cb","cx","dbb","db","d","dx","ebb","eb","ex","fbb","fb","f","fx","gbb","gb","g","gx","abb","ab","ax","bbb","bb","bx","split","exec","pitch","octave","toLowerCase","parseInt","noteOn","toString","o","diff","noteEndTicks"],"mappings":"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K,gCAOvD,sBAAI,yBAAU,C,IAAd,WAEC,OAAyB,IADXiM,EAAgB/S,IAAIF,MACrB+F,S,gCAMd,YAAA/B,OAAA,WACC,MAAO,CACNwP,OAAQxT,KAAKwT,OACbnS,KAAMrB,KAAKqB,KACX2F,OAAQhH,KAAKgH,SAOf,YAAA7C,SAAA,SAASC,GACRpE,KAAKgH,OAAS5C,EAAK4C,QAErB,EA7EA,GAAa,EAAAlB,c,8ECZA,EAAAuN,oBAAsB,CAClC,uBACA,wBACA,uBACA,mBACA,mBACA,mBACA,cACA,QACA,UACA,eACA,YACA,aACA,UACA,YACA,gBACA,WACA,gBACA,mBACA,aACA,eACA,aACA,YACA,YACA,kBACA,0BACA,0BACA,yBACA,0BACA,0BACA,oBACA,oBACA,mBACA,gBACA,yBACA,uBACA,gBACA,cACA,cACA,eACA,eACA,SACA,QACA,QACA,aACA,kBACA,oBACA,kBACA,UACA,oBACA,oBACA,iBACA,iBACA,aACA,aACA,cACA,gBACA,UACA,WACA,OACA,gBACA,cACA,gBACA,eACA,eACA,cACA,WACA,YACA,eACA,OACA,eACA,UACA,WACA,UACA,QACA,WACA,YACA,eACA,aACA,UACA,UACA,kBACA,oBACA,oBACA,iBACA,mBACA,iBACA,kBACA,uBACA,kBACA,eACA,oBACA,gBACA,gBACA,mBACA,eACA,gBACA,cACA,oBACA,iBACA,oBACA,oBACA,iBACA,gBACA,gBACA,QACA,QACA,WACA,OACA,UACA,WACA,SACA,SACA,cACA,QACA,cACA,YACA,aACA,cACA,aACA,iBACA,oBACA,eACA,WACA,aACA,iBACA,aACA,WACA,WAGY,EAAAE,qBAAuB,CACnC,QACA,uBACA,QACA,SACA,OACA,UACA,WACA,QACA,OACA,OACA,aACA,YACA,gBACA,QACA,aACA,iBAGY,EAAAH,iBAAmB,CAC/BzG,EAAG,eACHlE,EAAG,WACHgL,GAAI,YACJ9D,GAAI,iBACJC,GAAI,aACJ8D,GAAI,WACJC,GAAI,YACJC,GAAI,gBACJC,GAAI,iB,6BCjJL,SAASC,EAAiBlN,GAGzB,MAFyB,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KACzEA,EAAO,I,iDAgBrB,IACOmN,EACAC,EAFDC,GACCF,EAAS,sCACTC,EAAmB,CAExBE,KAAM,EAAGC,IAAK,EAAGlM,EAAG,EAAG,KAAM,EAAGmM,GAAI,EACpCC,IAAK,EAAGC,GAAI,EAAGC,EAAG,EAAG,KAAM,EAAGC,GAAI,EAClCC,IAAK,EAAGC,GAAI,EAAG9O,EAAG,EAAG,KAAM,EAAG+O,GAAI,EAClCC,IAAK,EAAGC,GAAI,EAAGC,EAAG,EAAG,KAAM,EAAGC,GAAI,EAClCC,IAAK,EAAGC,GAAI,EAAGC,EAAG,EAAG,KAAM,EAAGC,GAAI,EAClCC,IAAK,EAAGC,GAAI,EAAGxV,EAAG,EAAG,KAAM,GAAIyV,GAAI,GACnCC,IAAK,EAAGC,GAAI,GAAI7S,EAAG,GAAI,KAAM,GAAI8S,GAAI,IAE/B,SAAClP,GACP,IAAMmP,EAAQ3B,EAAO4B,KAAKpP,GACpBqP,EAAQF,EAAM,GACdG,EAASH,EAAM,GAErB,OADc1B,EAAiB4B,EAAME,eACO,IAA5BC,SAASF,EAAQ,IAAM,KAInCzQ,EAAmB,IAAItE,QAK7B,aA2BC,WAAYkV,EAAqBvP,EAAuBlF,GAEvD6D,EAAiB9D,IAAItB,KAAMuB,GAE3BvB,KAAK4G,KAAOoP,EAAOpP,KAEnB5G,KAAK8G,SAAWkP,EAAOlP,SAEvB9G,KAAK6G,gBAAkBJ,EAAQK,SAE/B9G,KAAK8B,MAAQkU,EAAOlU,MAEpB9B,KAAK2G,cAAgBF,EAAQ3E,MAAQkU,EAAOlU,MAqF9C,OA/EC,sBAAI,mBAAI,C,IAAR,WACC,OAlGmB8E,EAkGA5G,KAAK4G,KAjGnBiP,EAAS/R,KAAKmB,MAAM2B,EAAO,IAAM,EAChCkN,EAAiBlN,GAAQiP,EAAOI,WAFxC,IAAqBrP,EACdiP,G,IAoGN,SAAS7N,GACRhI,KAAK4G,KAAOqN,EAAYjM,I,gCAMzB,sBAAI,qBAAM,C,IAAV,WACC,OAAOlE,KAAKmB,MAAMjF,KAAK4G,KAAO,IAAM,G,IAGrC,SAAWsP,GACV,IAAMC,EAAOD,EAAIlW,KAAK6V,OACtB7V,KAAK4G,MAAe,GAAPuP,G,gCAMd,sBAAI,oBAAK,C,IAAT,WACC,OAAOrC,EAAiB9T,KAAK4G,O,IAG9B,SAAU+E,GACT3L,KAAK4G,KAAO,IAAM5G,KAAK6V,OAAS,GA3GR,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAC9DjE,QA0G+BjG,I,gCAMvD,sBAAI,uBAAQ,C,IAAZ,WACC,IAAMpK,EAAS6D,EAAiBlF,IAAIF,MACpC,OAAOuB,EAAO8B,eAAerD,KAAK8B,MAAQ9B,KAAK2G,eAAiBpF,EAAO8B,eAAerD,KAAK8B,Q,IAG5F,SAAayS,GACZ,IACM6B,EADShR,EAAiBlF,IAAIF,MACR4D,eAAe5D,KAAKiD,KAAOsR,GACvDvU,KAAK2G,cAAgByP,EAAepW,KAAK8B,O,gCAM1C,sBAAI,mBAAI,C,IAAR,WAEC,OADesD,EAAiBlF,IAAIF,MACtBqD,eAAerD,KAAK8B,Q,IAGnC,SAASoC,GACR,IAAM3C,EAAS6D,EAAiBlF,IAAIF,MACpCA,KAAK8B,MAAQP,EAAOqC,eAAeM,I,gCAQpC,sBAAI,mBAAI,C,IAAR,WAEC,OADekB,EAAiBlF,IAAIF,MACtB0D,gBAAgB1D,KAAK8B,Q,gCAGpC,YAAAkC,OAAA,WACC,MAAO,CACN8D,SAAU9H,KAAK8H,SACfnB,cAAe3G,KAAK2G,cACpBC,KAAM5G,KAAK4G,KACXvF,KAAMrB,KAAKqB,KACXS,MAAO9B,KAAK8B,MACZmB,KAAMjD,KAAKiD,KACX6D,SAAU9G,KAAK8G,WAGlB,EA5HA,GAAa,EAAAO","file":"Midi.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import { MidiData } from \"midi-file\";\nimport { search } from \"./BinarySearch\";\n\nconst privatePPQMap = new WeakMap<Header, number>();\n\nexport interface TempoEvent {\n\tticks: number;\n\tbpm: number;\n\ttime?: number;\n}\n\nexport interface TimeSignatureEvent {\n\tticks: number;\n\ttimeSignature: number[];\n\tmeasures?: number;\n}\n\nexport interface MetaEvent {\n\ttext: string;\n\ttype: string;\n\tticks: number;\n}\n\nexport interface KeySignatureEvent {\n\tticks: number;\n\tkey: string;\n\tscale: string;\n}\n\n/**\n * @hidden\n */\nexport const keySignatureKeys = [\"Cb\", \"Gb\", \"Db\", \"Ab\", \"Eb\", \"Bb\", \"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\", \"F#\", \"C#\"];\n\n/** The parsed midi file header */\nexport class Header {\n\n\t/**\n\t * The array of all the tempo events\n\t */\n\ttempos: TempoEvent[] = [];\n\n\t/**\n\t * The time signatures\n\t */\n\ttimeSignatures: TimeSignatureEvent[] = [];\n\n\t/**\n\t * The time signatures\n\t */\n\tkeySignatures: KeySignatureEvent[] = [];\n\n\t/**\n\t * Additional meta events\n\t */\n\tmeta: MetaEvent[] = [];\n\n\t/**\n\t * The name of the midi file\n\t */\n\tname = \"\";\n\n\tconstructor(midiData?: MidiData) {\n\t\t// look through all the tracks for tempo changes\n\n\t\tprivatePPQMap.set(this, 480);\n\n\t\tif (midiData) {\n\t\t\tprivatePPQMap.set(this, midiData.header.ticksPerBeat);\n\t\t\t// check the first track for all the relevant data\n\t\t\tmidiData.tracks[0].forEach(event => {\n\t\t\t\tif (event.meta) {\n\t\t\t\t\tif (event.type === \"timeSignature\") {\n\t\t\t\t\t\tthis.timeSignatures.push({\n\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\ttimeSignature: [event.numerator, event.denominator],\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (event.type === \"setTempo\") {\n\t\t\t\t\t\tthis.tempos.push({\n\t\t\t\t\t\t\tbpm: 60000000 / event.microsecondsPerBeat,\n\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (event.type === \"keySignature\") {\n\t\t\t\t\t\tthis.keySignatures.push({\n\t\t\t\t\t\t\tkey: keySignatureKeys[event.key + 7],\n\t\t\t\t\t\t\tscale: event.scale === 0 ? \"major\" : \"minor\",\n\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (event.type === \"trackName\") {\n\t\t\t\t\t\tthis.name = event.text;\n\t\t\t\t\t} else if (event.type !== \"endOfTrack\") {\n\t\t\t\t\t\tthis.meta.push({\n\t\t\t\t\t\t\ttext: event.text,\n\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\ttype: event.type,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.update();\n\t\t}\n\t}\n\n\t/**\n\t * This must be invoked after any changes are made to the tempo array\n\t * or the timeSignature array for the updated values to be reflected.\n\t */\n\tupdate(): void {\n\t\tlet currentTime = 0;\n\t\tlet lastEventBeats = 0;\n\t\t// make sure it's sorted\n\t\tthis.tempos.sort((a, b) => a.ticks - b.ticks);\n\t\tthis.tempos.forEach((event, index) => {\n\t\t\tconst lastBPM = index > 0 ? this.tempos[index - 1].bpm : this.tempos[0].bpm;\n\t\t\tconst beats = (event.ticks / this.ppq) - lastEventBeats;\n\t\t\tconst elapsedSeconds = (60 / lastBPM) * beats;\n\t\t\tevent.time = elapsedSeconds + currentTime;\n\t\t\tcurrentTime = event.time;\n\t\t\tlastEventBeats += beats;\n\t\t});\n\t\tthis.timeSignatures.sort((a, b) => a.ticks - b.ticks);\n\t\tthis.timeSignatures.forEach((event, index) => {\n\t\t\tconst lastEvent = index > 0 ? this.timeSignatures[index - 1] : this.timeSignatures[0];\n\t\t\tconst elapsedBeats = (event.ticks - lastEvent.ticks) / this.ppq;\n\t\t\tconst elapsedMeasures = (elapsedBeats / lastEvent.timeSignature[0]) / (lastEvent.timeSignature[1] / 4);\n\t\t\tlastEvent.measures = lastEvent.measures || 0;\n\t\t\tevent.measures = elapsedMeasures + lastEvent.measures;\n\t\t});\n\t}\n\n\t/**\n\t * Convert ticks into seconds based on the tempo changes\n\t */\n\tticksToSeconds(ticks: number): number {\n\t\t// find the relevant position\n\t\tconst index = search(this.tempos, ticks);\n\t\tif (index !== -1) {\n\t\t\tconst tempo = this.tempos[index];\n\t\t\tconst tempoTime = tempo.time;\n\t\t\tconst elapsedBeats = (ticks - tempo.ticks) / this.ppq;\n\t\t\treturn tempoTime + (60 / tempo.bpm) * elapsedBeats;\n\t\t} else {\n\t\t\t// assume 120\n\t\t\tconst beats = (ticks / this.ppq);\n\t\t\treturn (60 / 120) * beats;\n\t\t}\n\t}\n\n\t/**\n\t * Convert ticks into measures based off of the time signatures\n\t */\n\tticksToMeasures(ticks: number): number {\n\t\tconst index = search(this.timeSignatures, ticks);\n\t\tif (index !== -1) {\n\t\t\tconst timeSigEvent = this.timeSignatures[index];\n\t\t\tconst elapsedBeats = (ticks - timeSigEvent.ticks) / this.ppq;\n\t\t\treturn timeSigEvent.measures + elapsedBeats / (timeSigEvent.timeSignature[0] / timeSigEvent.timeSignature[1]) / 4;\n\t\t} else {\n\t\t\treturn (ticks / this.ppq) / 4;\n\t\t}\n\t}\n\n\t/**\n\t * The number of ticks per quarter note\n\t */\n\tget ppq(): number {\n\t\treturn privatePPQMap.get(this);\n\t}\n\n\t/**\n\t * Convert seconds to ticks based on the tempo events\n\t */\n\tsecondsToTicks(seconds: number): number {\n\t\t// find the relevant position\n\t\tconst index = search(this.tempos, seconds, \"time\");\n\t\tif (index !== -1) {\n\t\t\tconst tempo = this.tempos[index];\n\t\t\tconst tempoTime = tempo.time;\n\t\t\tconst elapsedTime = (seconds - tempoTime);\n\t\t\tconst elapsedBeats = elapsedTime / (60 / tempo.bpm);\n\t\t\treturn Math.round(tempo.ticks + elapsedBeats * this.ppq);\n\t\t} else {\n\t\t\t// assume 120\n\t\t\tconst beats = seconds / (60 / 120);\n\t\t\treturn Math.round(beats * this.ppq);\n\t\t}\n\t}\n\n\t/**\n\t * Convert the header into an object.\n\t */\n\ttoJSON(): HeaderJSON {\n\t\treturn {\n\t\t\tkeySignatures: this.keySignatures,\n\t\t\tmeta: this.meta,\n\t\t\tname: this.name,\n\t\t\tppq: this.ppq,\n\t\t\ttempos: this.tempos.map(t => {\n\t\t\t\treturn {\n\t\t\t\t\tbpm: t.bpm,\n\t\t\t\t\tticks: t.ticks,\n\t\t\t\t};\n\t\t\t}),\n\t\t\ttimeSignatures: this.timeSignatures,\n\t\t};\n\t}\n\n\t/**\n\t * parse a header json object.\n\t */\n\tfromJSON(json: HeaderJSON): void {\n\t\tthis.name = json.name;\n\t\t// clone all the attributes\n\t\tthis.tempos = json.tempos.map(t => Object.assign({}, t));\n\t\tthis.timeSignatures = json.timeSignatures.map(t => Object.assign({}, t));\n\t\tthis.keySignatures = json.keySignatures.map(t => Object.assign({}, t));\n\t\tthis.meta = json.meta.map(t => Object.assign({}, t));\n\t\tprivatePPQMap.set(this, json.ppq);\n\t\tthis.update();\n\t}\n\n\t/**\n\t * Update the tempo of the midi to a single tempo. Will remove and replace\n\t * any other tempos currently set and update all of the event timing.\n\t * @param bpm The tempo in beats per second\n\t */\n\tsetTempo(bpm: number): void {\n\t\tthis.tempos = [{\n\t\t\tbpm,\n\t\t\tticks: 0,\n\t\t}];\n\t\tthis.update();\n\t}\n}\n\nexport interface HeaderJSON {\n\tname: string;\n\tppq: number;\n\tmeta: MetaEvent[];\n\ttempos: TempoEvent[];\n\ttimeSignatures: TimeSignatureEvent[];\n\tkeySignatures: KeySignatureEvent[];\n}\n","exports.parseMidi = require('./lib/midi-parser')\nexports.writeMidi = require('./lib/midi-writer')\n","/**\n * Return the index of the element at or before the given property\n * @hidden\n */\nexport function search(array: any[], value: any, prop= \"ticks\"): number {\n\tlet beginning = 0;\n\tconst len = array.length;\n\tlet end = len;\n\tif (len > 0 && array[len - 1][prop] <= value) {\n\t\treturn len - 1;\n\t}\n\twhile (beginning < end) {\n\t\t// calculate the midpoint for roughly equal partition\n\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\tconst event = array[midPoint];\n\t\tconst nextEvent = array[midPoint + 1];\n\t\tif (event[prop] === value) {\n\t\t\t// choose the last one that has the same value\n\t\t\tfor (let i = midPoint; i < array.length; i++) {\n\t\t\t\tconst testEvent = array[i];\n\t\t\t\tif (testEvent[prop] === value) {\n\t\t\t\t\tmidPoint = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn midPoint;\n\t\t} else if (event[prop] < value && nextEvent[prop] > value) {\n\t\t\treturn midPoint;\n\t\t} else if (event[prop] > value) {\n\t\t\t// search lower\n\t\t\tend = midPoint;\n\t\t} else if (event[prop] < value) {\n\t\t\t// search upper\n\t\t\tbeginning = midPoint + 1;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * Does a binary search to insert the note\n * in the correct spot in the array\n * @hidden\n */\nexport function insert(array: any[], event: object, prop = \"ticks\"): void {\n\tif (array.length) {\n\t\tconst index = search(array, event[prop], prop);\n\t\tarray.splice(index + 1, 0, event);\n\t} else {\n\t\tarray.push(event);\n\t}\n}\n","import { MidiControllerEvent, MidiNoteOffEvent, MidiNoteOnEvent, MidiPitchBendEvent, MidiTrackData, MidiTrackNameEvent } from \"midi-file\";\nimport { insert } from \"./BinarySearch\";\nimport { ControlChange, ControlChangeInterface } from \"./ControlChange\";\nimport { ControlChangesJSON, createControlChanges } from \"./ControlChanges\";\nimport { PitchBend, PitchBendInterface, PitchBendJSON } from \"./PitchBend\";\n\nimport { Header } from \"./Header\";\nimport { Instrument, InstrumentJSON } from \"./Instrument\";\nimport { Note, NoteConstructorInterface, NoteJSON } from \"./Note\";\n\nconst privateHeaderMap = new WeakMap<Track, Header>();\n\n/**\n * A Track is a collection of notes and controlChanges\n */\nexport class Track {\n\n\t/**\n\t * The name of the track\n\t */\n\tname = \"\";\n\n\t/**\n\t * The instrument associated with the track\n\t */\n\tinstrument: Instrument;\n\n\t/**\n\t * The track's note events\n\t */\n\tnotes: Note[] = [];\n\n\t/**\n\t * The channel number of the track. Applies this channel\n\t * to all events associated with the channel\n\t */\n\tchannel: number;\n\n\t/**\n\t * The control change events\n\t */\n\tcontrolChanges = createControlChanges();\n\n\t/**\n\t * The pitch bend events\n\t */\n\tpitchBends: PitchBend[] = []\n\n\tconstructor(trackData: MidiTrackData, header: Header) {\n\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tif (trackData) {\n\t\t\tconst nameEvent = trackData.find(e => e.type === \"trackName\") as MidiTrackNameEvent;\n\t\t\tthis.name = nameEvent ? nameEvent.text : \"\";\n\t\t}\n\n\t\tthis.instrument = new Instrument(trackData, this);\n\n\t\t// defaults to 0\n\t\tthis.channel = 0;\n\n\t\tif (trackData) {\n\t\t\tconst noteOns = trackData.filter(event => event.type === \"noteOn\") as MidiNoteOnEvent[];\n\t\t\tconst noteOffs = trackData.filter(event => event.type === \"noteOff\") as MidiNoteOffEvent[];\n\t\t\twhile (noteOns.length) {\n\t\t\t\tconst currentNote = noteOns.shift();\n\t\t\t\t// set the channel based on the note\n\t\t\t\tthis.channel = currentNote.channel;\n\t\t\t\t// find the corresponding note off\n\t\t\t\tconst offIndex = noteOffs.findIndex(note => note.noteNumber === currentNote.noteNumber && note.absoluteTime >= currentNote.absoluteTime);\n\t\t\t\tif (offIndex !== -1) {\n\t\t\t\t\t// once it's got the note off, add it\n\t\t\t\t\tconst noteOff = noteOffs.splice(offIndex, 1)[0];\n\t\t\t\t\tthis.addNote({\n\t\t\t\t\t\tdurationTicks: noteOff.absoluteTime - currentNote.absoluteTime,\n\t\t\t\t\t\tmidi: currentNote.noteNumber,\n\t\t\t\t\t\tnoteOffVelocity: noteOff.velocity / 127,\n\t\t\t\t\t\tticks: currentNote.absoluteTime,\n\t\t\t\t\t\tvelocity: currentNote.velocity / 127,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst controlChanges = trackData.filter(event => event.type === \"controller\") as MidiControllerEvent[];\n\t\t\tcontrolChanges.forEach(event => {\n\t\t\t\tthis.addCC({\n\t\t\t\t\tnumber: event.controllerType,\n\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\tvalue: event.value / 127,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst pitchBends = trackData.filter(event => event.type === \"pitchBend\") as MidiPitchBendEvent[];\n\t\t\tpitchBends.forEach(event => {\n\t\t\t\tthis.addPitchBend({\n\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t// scale the value between -2^13 to 2^13 to -2 to 2\n\t\t\t\t\tvalue: event.value / Math.pow(2, 13),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// const endOfTrack = trackData.find(event => event.type === \"endOfTrack\");\n\t\t}\n\t}\n\n\t/**\n\t * Add a note to the notes array\n\t * @param props The note properties to add\n\t */\n\taddNote(props: NoteConstructorInterface): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst note = new Note({\n\t\t\tmidi: 0,\n\t\t\tticks: 0,\n\t\t\tvelocity: 1,\n\t\t}, {\n\t\t\tticks: 0,\n\t\t\tvelocity: 0,\n\t\t}, header);\n\t\tObject.assign(note, props);\n\t\tinsert(this.notes, note, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a control change to the track\n\t * @param props\n\t */\n\taddCC(props: Omit<ControlChangeInterface, \"ticks\"> | Omit<ControlChangeInterface, \"time\">): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst cc = new ControlChange({\n\t\t\tcontrollerType: props.number,\n\t\t}, header);\n\t\tdelete props.number;\n\t\tObject.assign(cc, props);\n\t\tif (!Array.isArray(this.controlChanges[cc.number])) {\n\t\t\tthis.controlChanges[cc.number] = [];\n\t\t}\n\t\tinsert(this.controlChanges[cc.number], cc, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a control change to the track\n\t */\n\taddPitchBend(props: Omit<PitchBendInterface, \"ticks\"> | Omit<PitchBendInterface, \"time\">): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst pb = new PitchBend({}, header);\n\t\tObject.assign(pb, props);\n\t\tinsert(this.pitchBends, pb, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * The end time of the last event in the track\n\t */\n\tget duration(): number {\n\t\tconst lastNote = this.notes[this.notes.length - 1];\n\t\tif (lastNote) {\n\t\t\treturn lastNote.time + lastNote.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The end time of the last event in the track in ticks\n\t */\n\tget durationTicks(): number {\n\t\tconst lastNote = this.notes[this.notes.length - 1];\n\t\tif (lastNote) {\n\t\t\treturn lastNote.ticks + lastNote.durationTicks;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Assign the json values to this track\n\t */\n\tfromJSON(json: TrackJSON): void {\n\t\tthis.name = json.name;\n\t\tthis.channel = json.channel;\n\t\tthis.instrument = new Instrument(undefined, this);\n\t\tthis.instrument.fromJSON(json.instrument);\n\t\tfor (const number in json.controlChanges) {\n\t\t\tif (json.controlChanges[number]) {\n\t\t\t\tjson.controlChanges[number].forEach(cc => {\n\t\t\t\t\tthis.addCC({\n\t\t\t\t\t\tnumber: cc.number,\n\t\t\t\t\t\tticks: cc.ticks,\n\t\t\t\t\t\tvalue: cc.value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tjson.notes.forEach(n => {\n\t\t\tthis.addNote({\n\t\t\t\tdurationTicks: n.durationTicks,\n\t\t\t\tmidi: n.midi,\n\t\t\t\tticks: n.ticks,\n\t\t\t\tvelocity: n.velocity,\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Convert the track into a JSON format\n\t */\n\ttoJSON(): TrackJSON {\n\n\t\t// convert all the CCs to JSON\n\t\tconst controlChanges = {};\n\t\tfor (let i = 0; i < 127; i++) {\n\t\t\tif (this.controlChanges.hasOwnProperty(i)) {\n\t\t\t\tcontrolChanges[i] = this.controlChanges[i].map(c => c.toJSON());\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tchannel: this.channel,\n\t\t\tcontrolChanges,\n\t\t\tpitchBends: this.pitchBends.map(pb => pb.toJSON()),\n\t\t\tinstrument: this.instrument.toJSON(),\n\t\t\tname: this.name,\n\t\t\tnotes: this.notes.map(n => n.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface TrackJSON {\n\tname: string;\n\tnotes: NoteJSON[];\n\tchannel: number;\n\tinstrument: InstrumentJSON;\n\tcontrolChanges: ControlChangesJSON;\n\tpitchBends: PitchBendJSON[];\n}\n","import { Header } from \"./Header\";\nimport { MidiControllerEvent } from \"midi-file\";\n\n/**\n * @hidden\n */\nexport type ControlChangeName = \"modulationWheel\" | \"breath\" | \"footController\" | \"portamentoTime\" | \"volume\" | \"balance\" | \"pan\" | \"sustain\" | \"portamentoTime\" | \"sostenuto\" | \"softPedal\" | \"legatoFootswitch\" | \"portamentoControl\";\n\ninterface ControlChangeMap {\n\t[key: number]: ControlChangeName;\n}\n/**\n * A map of values to control change names\n * @hidden\n */\nexport const controlChangeNames: ControlChangeMap = {\n\t1: \"modulationWheel\",\n\t2: \"breath\",\n\t4: \"footController\",\n\t5: \"portamentoTime\",\n\t7: \"volume\",\n\t8: \"balance\",\n\t10: \"pan\",\n\t64: \"sustain\",\n\t65: \"portamentoTime\",\n\t66: \"sostenuto\",\n\t67: \"softPedal\",\n\t68: \"legatoFootswitch\",\n\t84: \"portamentoControl\",\n};\n\n/**\n * swap the keys and values\n * @hidden\n */\nexport const controlChangeIds = Object.keys(controlChangeNames).reduce((obj, key) => {\n\tobj[controlChangeNames[key]] = key;\n\treturn obj;\n}, {});\n\nconst privateHeaderMap = new WeakMap<ControlChange, Header>();\nconst privateCCNumberMap = new WeakMap<ControlChange, number>();\n\n/**\n * Represents a control change event\n */\nexport class ControlChange implements ControlChangeInterface {\n\n\t/**\n\t * The number value of the event\n\t */\n\tvalue: number;\n\n\t/**\n\t * The tick time of the event\n\t */\n\tticks: number;\n\n\t/**\n\t * @param event\n\t * @param header\n\t */\n\tconstructor(event: Partial<MidiControllerEvent>, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\t\tprivateCCNumberMap.set(this, event.controllerType);\n\n\t\tthis.ticks = event.absoluteTime;\n\t\tthis.value = event.value;\n\t}\n\n\t/**\n\t * The controller number\n\t */\n\tget number(): number {\n\t\treturn privateCCNumberMap.get(this);\n\t}\n\n\t/**\n\t * return the common name of the control number if it exists\n\t */\n\tget name(): ControlChangeName {\n\t\tif (controlChangeNames[this.number]) {\n\t\t\treturn controlChangeNames[this.number];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\ttoJSON(): ControlChangeJSON {\n\t\treturn {\n\t\t\tnumber: this.number,\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n}\n\nexport interface ControlChangeJSON {\n\tnumber: number;\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n\nexport interface ControlChangeInterface {\n\tnumber: number;\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n","import { MidiChannelEvent, MidiTrackData, parseMidi } from \"midi-file\";\nimport { encode } from \"./Encode\";\nimport { Header, HeaderJSON } from \"./Header\";\nimport { Track, TrackJSON } from \"./Track\";\n\n/**\n * The main midi parsing class\n */\nexport class Midi {\n\n\t/**\n\t * Download and parse the MIDI file. Returns a promise\n\t * which resolves to the generated midi file\n\t * @param url The url to fetch\n\t */\n\tstatic async fromUrl(url: string): Promise<Midi> {\n\t\tconst response = await fetch(url);\n\t\tif (response.ok) {\n\t\t\tconst arrayBuffer = await response.arrayBuffer();\n\t\t\treturn new Midi(arrayBuffer);\n\t\t} else {\n\t\t\tthrow new Error(`could not load ${url}`);\n\t\t}\n\t}\n\n\t/**\n\t * The header information, includes things like tempo and meta events.\n\t */\n\theader: Header;\n\n\t/**\n\t * The midi tracks.\n\t */\n\ttracks: Track[];\n\n\t/**\n\t * Parse the midi data\n\t */\n\tconstructor(midiArray?: (ArrayLike<number> | ArrayBuffer)) {\n\n\t\t// parse the midi data if there is any\n\t\tlet midiData = null;\n\t\tif (midiArray) {\n\t\t\tif (midiArray instanceof ArrayBuffer) {\n\t\t\t\tmidiArray = new Uint8Array(midiArray);\n\t\t\t}\n\t\t\tmidiData = parseMidi(midiArray);\n\n\t\t\t// add the absolute times to each of the tracks\n\t\t\tmidiData.tracks.forEach(track => {\n\t\t\t\tlet currentTicks = 0;\n\t\t\t\ttrack.forEach(event => {\n\t\t\t\t\tcurrentTicks += event.deltaTime;\n\t\t\t\t\tevent.absoluteTime = currentTicks;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// ensure at most one instrument per track\n\t\t\tmidiData.tracks = splitTracks(midiData.tracks);\n\t\t}\n\n\t\tthis.header = new Header(midiData);\n\t\tthis.tracks = [];\n\n\t\t// parse the midi data\n\t\tif (midiArray) {\n\t\t\t// format 0, everything is on the same track\n\t\t\tthis.tracks = midiData.tracks.map(trackData => new Track(trackData, this.header));\n\n\t\t\t// if it's format 1 and there are no notes on the first track, remove it\n\t\t\tif (midiData.header.format === 1 && this.tracks[0].duration === 0) {\n\t\t\t\tthis.tracks.shift();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The name of the midi file, taken from the first track\n\t */\n\tget name(): string {\n\t\treturn this.header.name;\n\t}\n\tset name(n) {\n\t\tthis.header.name = n;\n\t}\n\n\t/**\n\t * The total length of the file in seconds\n\t */\n\tget duration(): number {\n\t\t// get the max of the last note of all the tracks\n\t\tconst durations = this.tracks.map(t => t.duration);\n\t\treturn Math.max(...durations);\n\t}\n\n\t/**\n\t * The total length of the file in ticks\n\t */\n\tget durationTicks(): number {\n\t\t// get the max of the last note of all the tracks\n\t\tconst durationTicks = this.tracks.map(t => t.durationTicks);\n\t\treturn Math.max(...durationTicks);\n\t}\n\n\t/**\n\t * Add a track to the midi file\n\t */\n\taddTrack(): Track {\n\t\tconst track = new Track(undefined, this.header);\n\t\tthis.tracks.push(track);\n\t\treturn track;\n\t}\n\n\t/**\n\t * Encode the midi as a Uint8Array.\n\t */\n\ttoArray(): Uint8Array {\n\t\treturn encode(this);\n\t}\n\n\t/**\n\t * Convert the midi object to JSON.\n\t */\n\ttoJSON(): MidiJSON {\n\t\treturn {\n\t\t\theader: this.header.toJSON(),\n\t\t\ttracks: this.tracks.map(track => track.toJSON()),\n\t\t};\n\t}\n\n\t/**\n\t * Parse a JSON representation of the object. Will overwrite the current\n\t * tracks and header.\n\t */\n\tfromJSON(json: MidiJSON): void {\n\t\tthis.header = new Header();\n\t\tthis.header.fromJSON(json.header);\n\t\tthis.tracks = json.tracks.map(trackJSON => {\n\t\t\tconst track = new Track(undefined, this.header);\n\t\t\ttrack.fromJSON(trackJSON);\n\t\t\treturn track;\n\t\t});\n\t}\n\n\t/**\n\t * Clone the entire object midi object\n\t */\n\tclone(): Midi {\n\t\tconst midi = new Midi();\n\t\tmidi.fromJSON(this.toJSON());\n\t\treturn midi;\n\t}\n}\n\n/**\n * The MIDI data in JSON format\n */\nexport interface MidiJSON {\n\theader: HeaderJSON;\n\ttracks: TrackJSON[];\n}\n\nexport { TrackJSON, Track } from \"./Track\";\nexport { HeaderJSON, Header } from \"./Header\";\n\n/**\n * Given a list of MIDI tracks, make sure that each channel corresponds to at\n * most one channel and at most one instrument. This means splitting up tracks\n * that contain more than one channel or instrument.\n */\nfunction splitTracks(tracks: MidiTrackData[]): MidiTrackData[] {\n\tconst newTracks = [];\n\n\tfor (let i = 0; i < tracks.length; i++) {\n\t\tconst defaultTrack = newTracks.length;\n\t\t// a map from [program, channel] tuples to new track numbers\n\t\tconst trackMap = new Map<string, number>();\n\t\t// a map from channel numbers to current program numbers\n\t\tconst currentProgram = Array(16).fill(0) as Array<number>;\n\n\t\tfor (const event of tracks[i]) {\n\t\t\tlet targetTrack = defaultTrack;\n\n\t\t\t// If the event has a channel, we need to find that channel's current\n\t\t\t// program number and the appropriate track for this [program, channel]\n\t\t\t// pair.\n\t\t\tconst channel = (event as MidiChannelEvent).channel;\n\t\t\tif (channel !== undefined) {\n\t\t\t\tif (event.type === \"programChange\") {\n\t\t\t\t\tcurrentProgram[channel] = event.programNumber;\n\t\t\t\t}\n\t\t\t\tconst program = currentProgram[channel];\n\t\t\t\tconst trackKey = `${program} ${channel}`;\n\t\t\t\tif (trackMap.has(trackKey)) {\n\t\t\t\t\ttargetTrack = trackMap.get(trackKey);\n\t\t\t\t} else {\n\t\t\t\t\ttargetTrack = defaultTrack + trackMap.size;\n\t\t\t\t\ttrackMap.set(trackKey, targetTrack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!newTracks[targetTrack]) {\n\t\t\t\tnewTracks.push([]);\n\t\t\t}\n\t\t\tnewTracks[targetTrack].push(event);\n\t\t}\n\t}\n\n\treturn newTracks;\n}\n","// data can be any array-like object.  It just needs to support .length, .slice, and an element getter []\n\nfunction parseMidi(data) {\n  var p = new Parser(data)\n\n  var headerChunk = p.readChunk()\n  if (headerChunk.id != 'MThd')\n    throw \"Bad MIDI file.  Expected 'MHdr', got: '\" + headerChunk.id + \"'\"\n  var header = parseHeader(headerChunk.data)\n\n  var tracks = []\n  for (var i=0; !p.eof() && i < header.numTracks; i++) {\n    var trackChunk = p.readChunk()\n    if (trackChunk.id != 'MTrk')\n      throw \"Bad MIDI file.  Expected 'MTrk', got: '\" + trackChunk.id + \"'\"\n    var track = parseTrack(trackChunk.data)\n    tracks.push(track)\n  }\n\n  return {\n    header: header,\n    tracks: tracks\n  }\n}\n\n\nfunction parseHeader(data) {\n  var p = new Parser(data)\n\n  var format = p.readUInt16()\n  var numTracks = p.readUInt16()\n\n  var result = {\n    format: format,\n    numTracks: numTracks\n  }\n\n  var timeDivision = p.readUInt16()\n  if (timeDivision & 0x8000) {\n    result.framesPerSecond = 0x100 - (timeDivision >> 8)\n    result.ticksPerFrame = timeDivision & 0xFF\n  } else {\n    result.ticksPerBeat = timeDivision\n  }\n\n  return result\n}\n\nfunction parseTrack(data) {\n  var p = new Parser(data)\n\n  var events = []\n  while (!p.eof()) {\n    var event = readEvent()\n    events.push(event)\n  }\n\n  return events\n\n  var lastEventTypeByte = null\n\n  function readEvent() {\n    var event = {}\n    event.deltaTime = p.readVarInt()\n\n    var eventTypeByte = p.readUInt8()\n\n    if ((eventTypeByte & 0xf0) === 0xf0) {\n      // system / meta event\n      if (eventTypeByte === 0xff) {\n        // meta event\n        event.meta = true\n        var metatypeByte = p.readUInt8()\n        var length = p.readVarInt()\n        switch (metatypeByte) {\n          case 0x00:\n            event.type = 'sequenceNumber'\n            if (length !== 2) throw \"Expected length for sequenceNumber event is 2, got \" + length\n            event.number = p.readUInt16()\n            return event\n          case 0x01:\n            event.type = 'text'\n            event.text = p.readString(length)\n            return event\n          case 0x02:\n            event.type = 'copyrightNotice'\n            event.text = p.readString(length)\n            return event\n          case 0x03:\n            event.type = 'trackName'\n            event.text = p.readString(length)\n            return event\n          case 0x04:\n            event.type = 'instrumentName'\n            event.text = p.readString(length)\n            return event\n          case 0x05:\n            event.type = 'lyrics'\n            event.text = p.readString(length)\n            return event\n          case 0x06:\n            event.type = 'marker'\n            event.text = p.readString(length)\n            return event\n          case 0x07:\n            event.type = 'cuePoint'\n            event.text = p.readString(length)\n            return event\n          case 0x20:\n            event.type = 'channelPrefix'\n            if (length != 1) throw \"Expected length for channelPrefix event is 1, got \" + length\n            event.channel = p.readUInt8()\n            return event\n          case 0x21:\n            event.type = 'portPrefix'\n            if (length != 1) throw \"Expected length for portPrefix event is 1, got \" + length\n            event.port = p.readUInt8()\n            return event\n          case 0x2f:\n            event.type = 'endOfTrack'\n            if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length\n            return event\n          case 0x51:\n            event.type = 'setTempo';\n            if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length\n            event.microsecondsPerBeat = p.readUInt24()\n            return event\n          case 0x54:\n            event.type = 'smpteOffset';\n            if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length\n            var hourByte = p.readUInt8()\n            var FRAME_RATES = { 0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30 }\n            event.frameRate = FRAME_RATES[hourByte & 0x60]\n            event.hour = hourByte & 0x1f\n            event.min = p.readUInt8()\n            event.sec = p.readUInt8()\n            event.frame = p.readUInt8()\n            event.subFrame = p.readUInt8()\n            return event\n          case 0x58:\n            event.type = 'timeSignature'\n            if (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length\n            event.numerator = p.readUInt8()\n            event.denominator = (1 << p.readUInt8())\n            event.metronome = p.readUInt8()\n            event.thirtyseconds = p.readUInt8()\n            return event\n          case 0x59:\n            event.type = 'keySignature'\n            if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length\n            event.key = p.readInt8()\n            event.scale = p.readUInt8()\n            return event\n          case 0x7f:\n            event.type = 'sequencerSpecific'\n            event.data = p.readBytes(length)\n            return event\n          default:\n            event.type = 'unknownMeta'\n            event.data = p.readBytes(length)\n            event.metatypeByte = metatypeByte\n            return event\n        }\n      } else if (eventTypeByte == 0xf0) {\n        event.type = 'sysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else if (eventTypeByte == 0xf7) {\n        event.type = 'endSysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else {\n        throw \"Unrecognised MIDI event type byte: \" + eventTypeByte\n      }\n    } else {\n      // channel event\n      var param1\n      if ((eventTypeByte & 0x80) === 0) {\n        // running status - reuse lastEventTypeByte as the event type.\n        // eventTypeByte is actually the first parameter\n        if (lastEventTypeByte === null)\n          throw \"Running status byte encountered before status byte\"\n        param1 = eventTypeByte\n        eventTypeByte = lastEventTypeByte\n        event.running = true\n      } else {\n        param1 = p.readUInt8()\n        lastEventTypeByte = eventTypeByte\n      }\n      var eventType = eventTypeByte >> 4\n      event.channel = eventTypeByte & 0x0f\n      switch (eventType) {\n        case 0x08:\n          event.type = 'noteOff'\n          event.noteNumber = param1\n          event.velocity = p.readUInt8()\n          return event\n        case 0x09:\n          var velocity = p.readUInt8()\n          event.type = velocity === 0 ? 'noteOff' : 'noteOn'\n          event.noteNumber = param1\n          event.velocity = velocity\n          if (velocity === 0) event.byte9 = true\n          return event\n        case 0x0a:\n          event.type = 'noteAftertouch'\n          event.noteNumber = param1\n          event.amount = p.readUInt8()\n          return event\n        case 0x0b:\n          event.type = 'controller'\n          event.controllerType = param1\n          event.value = p.readUInt8()\n          return event\n        case 0x0c:\n          event.type = 'programChange'\n          event.programNumber = param1\n          return event\n        case 0x0d:\n          event.type = 'channelAftertouch'\n          event.amount = param1\n          return event\n        case 0x0e:\n          event.type = 'pitchBend'\n          event.value = (param1 + (p.readUInt8() << 7)) - 0x2000\n          return event\n        default:\n          throw \"Unrecognised MIDI event type: \" + eventType\n      }\n    }\n  }\n}\n\nfunction Parser(data) {\n  this.buffer = data\n  this.bufferLen = this.buffer.length\n  this.pos = 0\n}\n\nParser.prototype.eof = function() {\n  return this.pos >= this.bufferLen\n}\n\nParser.prototype.readUInt8 = function() {\n  var result = this.buffer[this.pos]\n  this.pos += 1\n  return result\n}\n\nParser.prototype.readInt8 = function() {\n  var u = this.readUInt8()\n  if (u & 0x80)\n    return u - 0x100\n  else\n    return u\n}\n\nParser.prototype.readUInt16 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8()\n\n    return (b0 << 8) + b1\n}\n\nParser.prototype.readInt16 = function() {\n  var u = this.readUInt16()\n  if (u & 0x8000)\n    return u - 0x10000\n  else\n    return u\n}\n\nParser.prototype.readUInt24 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8()\n\n    return (b0 << 16) + (b1 << 8) + b2\n}\n\nParser.prototype.readInt24 = function() {\n  var u = this.readUInt24()\n  if (u & 0x800000)\n    return u - 0x1000000\n  else\n    return u\n}\n\nParser.prototype.readUInt32 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8(),\n      b3 = this.readUInt8()\n\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3\n}\n\nParser.prototype.readBytes = function(len) {\n  var bytes = this.buffer.slice(this.pos, this.pos + len)\n  this.pos += len\n  return bytes\n}\n\nParser.prototype.readString = function(len) {\n  var bytes = this.readBytes(len)\n  return String.fromCharCode.apply(null, bytes)\n}\n\nParser.prototype.readVarInt = function() {\n  var result = 0\n  while (!this.eof()) {\n    var b = this.readUInt8()\n    if (b & 0x80) {\n      result += (b & 0x7f)\n      result <<= 7\n    } else {\n      // b is last byte\n      return result + b\n    }\n  }\n  // premature eof\n  return result\n}\n\nParser.prototype.readChunk = function() {\n  var id = this.readString(4)\n  var length = this.readUInt32()\n  var data = this.readBytes(length)\n  return {\n    id: id,\n    length: length,\n    data: data\n  }\n}\n\nmodule.exports = parseMidi\n","// data should be the same type of format returned by parseMidi\n// for maximum compatibililty, returns an array of byte values, suitable for conversion to Buffer, Uint8Array, etc.\n\n// opts:\n// - running              reuse previous eventTypeByte when possible, to compress file\n// - useByte9ForNoteOff   use 0x09 for noteOff when velocity is zero\n\nfunction writeMidi(data, opts) {\n  if (typeof data !== 'object')\n    throw 'Invalid MIDI data'\n\n  opts = opts || {}\n\n  var header = data.header || {}\n  var tracks = data.tracks || []\n  var i, len = tracks.length\n\n  var w = new Writer()\n  writeHeader(w, header, len)\n\n  for (i=0; i < len; i++) {\n    writeTrack(w, tracks[i], opts)\n  }\n\n  return w.buffer\n}\n\nfunction writeHeader(w, header, numTracks) {\n  var format = header.format == null ? 1 : header.format\n\n  var timeDivision = 128\n  if (header.timeDivision) {\n    timeDivision = header.timeDivision\n  } else if (header.ticksPerFrame && header.framesPerSecond) {\n    timeDivision = (-(header.framesPerSecond & 0xFF) << 8) | (header.ticksPerFrame & 0xFF)\n  } else if (header.ticksPerBeat) {\n    timeDivision = header.ticksPerBeat & 0x7FFF\n  }\n\n  var h = new Writer()\n  h.writeUInt16(format)\n  h.writeUInt16(numTracks)\n  h.writeUInt16(timeDivision)\n\n  w.writeChunk('MThd', h.buffer)\n}\n\nfunction writeTrack(w, track, opts) {\n  var t = new Writer()\n  var i, len = track.length\n  var eventTypeByte = null\n  for (i=0; i < len; i++) {\n    // Reuse last eventTypeByte when opts.running is set, or event.running is explicitly set on it.\n    // parseMidi will set event.running for each event, so that we can get an exact copy by default.\n    // Explicitly set opts.running to false, to override event.running and never reuse last eventTypeByte.\n    if (opts.running === false || !opts.running && !track[i].running) eventTypeByte = null\n\n    eventTypeByte = writeEvent(t, track[i], eventTypeByte, opts.useByte9ForNoteOff)\n  }\n  w.writeChunk('MTrk', t.buffer)\n}\n\nfunction writeEvent(w, event, lastEventTypeByte, useByte9ForNoteOff) {\n  var type = event.type\n  var deltaTime = event.deltaTime\n  var text = event.text || ''\n  var data = event.data || []\n  var eventTypeByte = null\n  w.writeVarInt(deltaTime)\n\n  switch (type) {\n    // meta events\n    case 'sequenceNumber':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x00)\n      w.writeVarInt(2)\n      w.writeUInt16(event.number)\n      break;\n\n    case 'text':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x01)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'copyrightNotice':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x02)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'trackName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x03)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'instrumentName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x04)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'lyrics':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x05)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'marker':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x06)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'cuePoint':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x07)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'channelPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x20)\n      w.writeVarInt(1)\n      w.writeUInt8(event.channel)\n      break;\n\n    case 'portPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x21)\n      w.writeVarInt(1)\n      w.writeUInt8(event.port)\n      break;\n\n    case 'endOfTrack':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x2F)\n      w.writeVarInt(0)\n      break;\n\n    case 'setTempo':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x51)\n      w.writeVarInt(3)\n      w.writeUInt24(event.microsecondsPerBeat)\n      break;\n\n    case 'smpteOffset':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x54)\n      w.writeVarInt(5)\n      var FRAME_RATES = { 24: 0x00, 25: 0x20, 29: 0x40, 30: 0x60 }\n      var hourByte = (event.hour & 0x1F) | FRAME_RATES[event.frameRate]\n      w.writeUInt8(hourByte)\n      w.writeUInt8(event.min)\n      w.writeUInt8(event.sec)\n      w.writeUInt8(event.frame)\n      w.writeUInt8(event.subFrame)\n      break;\n\n    case 'timeSignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x58)\n      w.writeVarInt(4)\n      w.writeUInt8(event.numerator)\n      var denominator = Math.floor((Math.log(event.denominator) / Math.LN2)) & 0xFF\n      w.writeUInt8(denominator)\n      w.writeUInt8(event.metronome)\n      w.writeUInt8(event.thirtyseconds || 8)\n      break;\n\n    case 'keySignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x59)\n      w.writeVarInt(2)\n      w.writeInt8(event.key)\n      w.writeUInt8(event.scale)\n      break;\n\n    case 'sequencerSpecific':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x7F)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'unknownMeta':\n      if (event.metatypeByte != null) {\n        w.writeUInt8(0xFF)\n        w.writeUInt8(event.metatypeByte)\n        w.writeVarInt(data.length)\n        w.writeBytes(data)\n      }\n      break;\n\n    // system-exclusive\n    case 'sysEx':\n      w.writeUInt8(0xF0)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'endSysEx':\n      w.writeUInt8(0xF7)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    // channel events\n    case 'noteOff':\n      // Use 0x90 when opts.useByte9ForNoteOff is set and velocity is zero, or when event.byte9 is explicitly set on it.\n      // parseMidi will set event.byte9 for each event, so that we can get an exact copy by default.\n      // Explicitly set opts.useByte9ForNoteOff to false, to override event.byte9 and always use 0x80 for noteOff events.\n      var noteByte = ((useByte9ForNoteOff !== false && event.byte9) || (useByte9ForNoteOff && event.velocity == 0)) ? 0x90 : 0x80\n\n      eventTypeByte = noteByte | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteOn':\n      eventTypeByte = 0x90 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteAftertouch':\n      eventTypeByte = 0xA0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'controller':\n      eventTypeByte = 0xB0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.controllerType)\n      w.writeUInt8(event.value)\n      break;\n\n    case 'programChange':\n      eventTypeByte = 0xC0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.programNumber)\n      break;\n\n    case 'channelAftertouch':\n      eventTypeByte = 0xD0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'pitchBend':\n      eventTypeByte = 0xE0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      var value14 = 0x2000 + event.value\n      var lsb14 = (value14 & 0x7F)\n      var msb14 = (value14 >> 7) & 0x7F\n      w.writeUInt8(lsb14)\n      w.writeUInt8(msb14)\n    break;\n\n    default:\n      throw 'Unrecognized event type: ' + type\n  }\n  return eventTypeByte\n}\n\n\nfunction Writer() {\n  this.buffer = []\n}\n\nWriter.prototype.writeUInt8 = function(v) {\n  this.buffer.push(v & 0xFF)\n}\nWriter.prototype.writeInt8 = Writer.prototype.writeUInt8\n\nWriter.prototype.writeUInt16 = function(v) {\n  var b0 = (v >> 8) & 0xFF,\n      b1 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n}\nWriter.prototype.writeInt16 = Writer.prototype.writeUInt16\n\nWriter.prototype.writeUInt24 = function(v) {\n  var b0 = (v >> 16) & 0xFF,\n      b1 = (v >> 8) & 0xFF,\n      b2 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n}\nWriter.prototype.writeInt24 = Writer.prototype.writeUInt24\n\nWriter.prototype.writeUInt32 = function(v) {\n  var b0 = (v >> 24) & 0xFF,\n      b1 = (v >> 16) & 0xFF,\n      b2 = (v >> 8) & 0xFF,\n      b3 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n  this.writeUInt8(b3)\n}\nWriter.prototype.writeInt32 = Writer.prototype.writeUInt32\n\n\nWriter.prototype.writeBytes = function(arr) {\n  this.buffer = this.buffer.concat(Array.prototype.slice.call(arr, 0))\n}\n\nWriter.prototype.writeString = function(str) {\n  var i, len = str.length, arr = []\n  for (i=0; i < len; i++) {\n    arr.push(str.codePointAt(i))\n  }\n  this.writeBytes(arr)\n}\n\nWriter.prototype.writeVarInt = function(v) {\n  if (v < 0) throw \"Cannot write negative variable-length integer\"\n\n  if (v <= 0x7F) {\n    this.writeUInt8(v)\n  } else {\n    var i = v\n    var bytes = []\n    bytes.push(i & 0x7F)\n    i >>= 7\n    while (i) {\n      var b = i & 0x7F | 0x80\n      bytes.push(b)\n      i >>= 7\n    }\n    this.writeBytes(bytes.reverse())\n  }\n}\n\nWriter.prototype.writeChunk = function(id, data) {\n  this.writeString(id)\n  this.writeUInt32(data.length)\n  this.writeBytes(data)\n}\n\nmodule.exports = writeMidi\n","import { MidiPitchBendEvent, writeMidi } from \"midi-file\";\nimport { MidiControllerEvent, MidiData, MidiEndOfTrackEvent,\n\tMidiInstrumentEvent, MidiKeySignatureEvent, MidiNoteOffEvent,\n\tMidiNoteOnEvent, MidiTempoEvent, MidiTextEvent, MidiTimeSignatureEvent, MidiTrackNameEvent } from \"midi-file\";\nimport { ControlChange } from \"./ControlChange\";\nimport { PitchBend } from \"./PitchBend\";\nimport { KeySignatureEvent, keySignatureKeys, MetaEvent, TempoEvent, TimeSignatureEvent } from \"./Header\";\nimport { Midi } from \"./Midi\";\nimport { Note } from \"./Note\";\nimport { Track } from \"./Track\";\nimport flatten from \"array-flatten\";\n\nfunction encodeNote(note: Note, channel: number): [MidiNoteOnEvent, MidiNoteOffEvent] {\n\treturn [{\n\t\tabsoluteTime: note.ticks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\tnoteNumber: note.midi,\n\t\ttype: \"noteOn\",\n\t\tvelocity: Math.floor(note.velocity * 127),\n\t},\n\t{\n\t\tabsoluteTime: note.ticks + note.durationTicks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\tnoteNumber: note.midi,\n\t\ttype: \"noteOff\",\n\t\tvelocity: Math.floor(note.noteOffVelocity * 127),\n\t}];\n}\n\nfunction encodeNotes(track: Track): Array<MidiNoteOnEvent | MidiNoteOffEvent> {\n\treturn flatten(track.notes.map(note => encodeNote(note, track.channel))) as unknown as Array<MidiNoteOnEvent | MidiNoteOffEvent>;\n}\n\nfunction encodeControlChange(cc: ControlChange, channel: number): MidiControllerEvent {\n\treturn {\n\t\tabsoluteTime: cc.ticks,\n\t\tchannel,\n\t\tcontrollerType: cc.number,\n\t\tdeltaTime: 0,\n\t\ttype: \"controller\",\n\t\tvalue: cc.value,\n\t};\n}\n\nfunction encodeControlChanges(track: Track): MidiControllerEvent[] {\n\tconst controlChanges: MidiControllerEvent[] = [];\n\tfor (let i = 0; i < 127; i++) {\n\t\tif (track.controlChanges.hasOwnProperty(i)) {\n\t\t\ttrack.controlChanges[i].forEach((cc: ControlChange) => {\n\t\t\t\tcontrolChanges.push(encodeControlChange(cc, track.channel));\n\t\t\t});\n\t\t}\n\t}\n\treturn controlChanges;\n}\n\nfunction encodePitchBend(pb: PitchBend, channel: number): MidiPitchBendEvent {\n\treturn {\n\t\tabsoluteTime: pb.ticks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\ttype: \"pitchBend\",\n\t\tvalue: pb.value,\n\t};\n}\n\nfunction encodePitchBends(track: Track): MidiPitchBendEvent[] {\n\tconst pitchBends: MidiPitchBendEvent[] = [];\n\ttrack.pitchBends.forEach((pb: PitchBend) => {\n\t\tpitchBends.push(encodePitchBend(pb, track.channel));\n\t});\t\n\treturn pitchBends;\n}\n\nfunction encodeInstrument(track: Track): MidiInstrumentEvent {\n\treturn {\n\t\tabsoluteTime: 0,\n\t\tchannel: track.channel,\n\t\tdeltaTime: 0,\n\t\tprogramNumber: track.instrument.number,\n\t\ttype: \"programChange\",\n\t};\n}\n\nfunction encodeTrackName(name: string): MidiTrackNameEvent {\n\treturn {\n\t\tabsoluteTime: 0,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\ttext: name,\n\t\ttype: \"trackName\",\n\t};\n}\n\nfunction encodeTempo(tempo: TempoEvent): MidiTempoEvent {\n\treturn {\n\t\tabsoluteTime: tempo.ticks,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\tmicrosecondsPerBeat: Math.floor(60000000 / tempo.bpm),\n\t\ttype: \"setTempo\",\n\t};\n}\n\nfunction encodeTimeSignature(timeSig: TimeSignatureEvent): MidiTimeSignatureEvent {\n\treturn {\n\t\tabsoluteTime: timeSig.ticks,\n\t\tdeltaTime: 0,\n\t\tdenominator: timeSig.timeSignature[1],\n\t\tmeta: true,\n\t\tmetronome: 24,\n\t\tnumerator: timeSig.timeSignature[0],\n\t\tthirtyseconds: 8,\n\t\ttype: \"timeSignature\",\n\t};\n}\n\n// function encodeMeta(event: )\n\nfunction encodeKeySignature(keySig: KeySignatureEvent): MidiKeySignatureEvent {\n\tconst keyIndex = keySignatureKeys.indexOf(keySig.key);\n\treturn {\n\t\tabsoluteTime: keySig.ticks,\n\t\tdeltaTime: 0,\n\t\tkey: keyIndex + 7,\n\t\tmeta: true,\n\t\tscale: keySig.scale === \"major\" ? 0 : 1,\n\t\ttype: \"keySignature\",\n\t};\n}\n\nfunction encodeText(textEvent: MetaEvent): MidiTextEvent {\n\treturn {\n\t\tabsoluteTime: textEvent.ticks,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\ttext: textEvent.text,\n\t\ttype: textEvent.type,\n\t} as MidiTextEvent;\n}\n\n/**\n * Convert the midi object to an array\n */\nexport function encode(midi: Midi): Uint8Array {\n\tconst midiData: MidiData = {\n\t\theader: {\n\t\t\tformat: 1,\n\t\t\tnumTracks: midi.tracks.length + 1,\n\t\t\tticksPerBeat: midi.header.ppq,\n\t\t},\n\t\ttracks: [\n\t\t\t[\n\t\t\t\t// the name data\n\t\t\t\t{\n\t\t\t\t\tabsoluteTime: 0,\n\t\t\t\t\tdeltaTime: 0,\n\t\t\t\t\tmeta: true,\n\t\t\t\t\ttext: midi.header.name,\n\t\t\t\t\ttype: \"trackName\",\n\t\t\t\t} as MidiTrackNameEvent,\n\t\t\t\t...midi.header.keySignatures.map(keySig => encodeKeySignature(keySig)),\n\t\t\t\t// and all the meta events (cloned for safety)\n\t\t\t\t...midi.header.meta.map(e => encodeText(e)),\n\t\t\t\t// the first track is all the tempo data\n\t\t\t\t...midi.header.tempos.map(tempo => encodeTempo(tempo)),\n\t\t\t\t// and the time signature data\n\t\t\t\t...midi.header.timeSignatures.map(timeSig => encodeTimeSignature(timeSig)),\n\t\t\t],\n\t\t\t// the remaining tracks\n\t\t\t...midi.tracks.map(track => {\n\t\t\t\treturn [\n\t\t\t\t\t// add the name\n\t\t\t\t\tencodeTrackName(track.name),\n\t\t\t\t\t// the instrument\n\t\t\t\t\tencodeInstrument(track),\n\t\t\t\t\t// add the notes\n\t\t\t\t\t...encodeNotes(track),\n\t\t\t\t\t// and the control changes\n\t\t\t\t\t...encodeControlChanges(track),\n\t\t\t\t\t// and the pitch bends\n\t\t\t\t\t...encodePitchBends(track)\n\t\t\t\t];\n\t\t\t}),\n\t\t],\n\t};\n\n\t// sort and set deltaTime of all of the tracks\n\tmidiData.tracks = midiData.tracks.map(track => {\n\t\ttrack = track.sort((a, b) => a.absoluteTime - b.absoluteTime);\n\t\tlet lastTime = 0;\n\t\ttrack.forEach(note => {\n\t\t\tnote.deltaTime = note.absoluteTime - lastTime;\n\t\t\tlastTime = note.absoluteTime;\n\t\t\tdelete note.absoluteTime;\n\t\t});\n\t\t// end of track\n\t\ttrack.push({\n\t\t\tdeltaTime: 0,\n\t\t\tmeta: true,\n\t\t\ttype: \"endOfTrack\",\n\t\t} as MidiEndOfTrackEvent);\n\t\treturn track;\n\t});\n\n\t// return midiData\n\treturn new Uint8Array(writeMidi(midiData));\n}\n","'use strict'\n\n/**\n * Expose `arrayFlatten`.\n */\nmodule.exports = flatten\nmodule.exports.from = flattenFrom\nmodule.exports.depth = flattenDepth\nmodule.exports.fromDepth = flattenFromDepth\n\n/**\n * Flatten an array.\n *\n * @param  {Array} array\n * @return {Array}\n */\nfunction flatten (array) {\n  if (!Array.isArray(array)) {\n    throw new TypeError('Expected value to be an array')\n  }\n\n  return flattenFrom(array)\n}\n\n/**\n * Flatten an array-like structure.\n *\n * @param  {Array} array\n * @return {Array}\n */\nfunction flattenFrom (array) {\n  return flattenDown(array, [])\n}\n\n/**\n * Flatten an array-like structure with depth.\n *\n * @param  {Array}  array\n * @param  {number} depth\n * @return {Array}\n */\nfunction flattenDepth (array, depth) {\n  if (!Array.isArray(array)) {\n    throw new TypeError('Expected value to be an array')\n  }\n\n  return flattenFromDepth(array, depth)\n}\n\n/**\n * Flatten an array-like structure with depth.\n *\n * @param  {Array}  array\n * @param  {number} depth\n * @return {Array}\n */\nfunction flattenFromDepth (array, depth) {\n  if (typeof depth !== 'number') {\n    throw new TypeError('Expected the depth to be a number')\n  }\n\n  return flattenDownDepth(array, [], depth)\n}\n\n/**\n * Flatten an array indefinitely.\n *\n * @param  {Array} array\n * @param  {Array} result\n * @return {Array}\n */\nfunction flattenDown (array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (Array.isArray(value)) {\n      flattenDown(value, result)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Flatten an array with depth.\n *\n * @param  {Array}  array\n * @param  {Array}  result\n * @param  {number} depth\n * @return {Array}\n */\nfunction flattenDownDepth (array, result, depth) {\n  depth--\n\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (depth > -1 && Array.isArray(value)) {\n      flattenDownDepth(value, result, depth)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n","import { controlChangeIds } from \"./ControlChange\";\nimport { ControlChange, ControlChangeJSON } from \"./ControlChange\";\n\nexport interface ControlChanges {\n\t[key: string]: ControlChange[];\n\t[key: number]: ControlChange[];\n}\n\nexport interface ControlChangesJSON {\n\t[key: string]: ControlChangeJSON[];\n\t[key: number]: ControlChangeJSON[];\n}\n\n/**\n * Automatically creates an alias for named control values using Proxies\n * @hidden\n */\nexport function createControlChanges(): ControlChanges {\n\treturn new Proxy({}, {\n\t\t// tslint:disable-next-line: typedef\n\t\tget(target, handler) {\n\t\t\tif (target[handler]) {\n\t\t\t\treturn target[handler];\n\t\t\t} else if (controlChangeIds.hasOwnProperty(handler)) {\n\t\t\t\treturn target[controlChangeIds[handler]];\n\t\t\t}\n\t\t},\n\t\t// tslint:disable-next-line: typedef\n\t\tset(target, handler, value) {\n\t\t\tif (controlChangeIds.hasOwnProperty(handler)) {\n\t\t\t\ttarget[controlChangeIds[handler]] = value;\n\t\t\t} else {\n\t\t\t\ttarget[handler] = value;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t});\n}\n","import { Header } from \"./Header\";\nimport { MidiPitchBendEvent } from \"midi-file\";\n\nconst privateHeaderMap = new WeakMap<PitchBend, Header>();\n\n/**\n * Represents a pitch bend event\n */\nexport class PitchBend implements PitchBendInterface {\n\n\t/**\n\t * The pitch value from...\n\t */\n\tvalue: number;\n\n\t/**\n\t * The tick time of the event\n\t */\n\tticks: number;\n\n\t/**\n\t * @param event\n\t * @param header\n\t */\n\tconstructor(event: Partial<MidiPitchBendEvent>, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tthis.ticks = event.absoluteTime;\n\t\tthis.value = event.value;\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\ttoJSON(): PitchBendJSON {\n\t\treturn {\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n}\n\nexport interface PitchBendJSON {\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n\nexport interface PitchBendInterface {\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n","import { MidiInstrumentEvent, MidiTrackData } from \"midi-file\";\nimport { DrumKitByPatchID, instrumentByPatchID, InstrumentFamilyByID } from \"./InstrumentMaps\";\nimport { Track } from \"./Track\";\n\n/**\n * @hidden\n */\nconst privateTrackMap = new WeakMap<Instrument, Track>();\n\n/**\n * Describes the midi instrument of a track\n */\nexport class Instrument {\n\n\t/**\n\t * The instrument number\n\t */\n\tnumber = 0;\n\n\t/**\n\t * @param trackData\n\t * @param track \n\t */\n\tconstructor(trackData: MidiTrackData, track: Track) {\n\n\t\tprivateTrackMap.set(this, track);\n\t\tthis.number = 0;\n\t\tif (trackData) {\n\t\t\tconst programChange = trackData.find(e => e.type === \"programChange\") as MidiInstrumentEvent;\n\t\t\tif (programChange) {\n\t\t\t\tthis.number = programChange.programNumber;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The common name of the instrument\n\t */\n\tget name(): string {\n\t\tif (this.percussion) {\n\t\t\treturn DrumKitByPatchID[this.number];\n\t\t} else {\n\t\t\treturn instrumentByPatchID[this.number];\n\t\t}\n\t}\n\n\tset name(n: string) {\n\t\tconst patchNumber = instrumentByPatchID.indexOf(n);\n\t\tif (patchNumber !== -1) {\n\t\t\tthis.number = patchNumber;\n\t\t}\n\t}\n\n\t/**\n\t * The instrument family, e.g. \"piano\".\n\t */\n\tget family(): string {\n\t\tif (this.percussion) {\n\t\t\treturn \"drums\";\n\t\t} else {\n\t\t\treturn InstrumentFamilyByID[Math.floor(this.number / 8)];\n\t\t}\n\t}\n\n\t/**\n\t * If the instrument is a percussion instrument\n\t */\n\tget percussion(): boolean {\n\t\tconst track = privateTrackMap.get(this);\n\t\treturn track.channel === 9;\n\t}\n\n\t/**\n\t * Convert it to JSON form\n\t */\n\ttoJSON(): InstrumentJSON {\n\t\treturn {\n\t\t\tfamily: this.family,\n\t\t\tname: this.name,\n\t\t\tnumber: this.number,\n\t\t};\n\t}\n\n\t/**\n\t * Convert from JSON form\n\t */\n\tfromJSON(json: InstrumentJSON): void {\n\t\tthis.number = json.number;\n\t}\n}\n\nexport interface InstrumentJSON {\n\tnumber: number;\n\tname: string;\n\tfamily: string;\n}\n","export const instrumentByPatchID = [\n\t\"acoustic grand piano\",\n\t\"bright acoustic piano\",\n\t\"electric grand piano\",\n\t\"honky-tonk piano\",\n\t\"electric piano 1\",\n\t\"electric piano 2\",\n\t\"harpsichord\",\n\t\"clavi\",\n\t\"celesta\",\n\t\"glockenspiel\",\n\t\"music box\",\n\t\"vibraphone\",\n\t\"marimba\",\n\t\"xylophone\",\n\t\"tubular bells\",\n\t\"dulcimer\",\n\t\"drawbar organ\",\n\t\"percussive organ\",\n\t\"rock organ\",\n\t\"church organ\",\n\t\"reed organ\",\n\t\"accordion\",\n\t\"harmonica\",\n\t\"tango accordion\",\n\t\"acoustic guitar (nylon)\",\n\t\"acoustic guitar (steel)\",\n\t\"electric guitar (jazz)\",\n\t\"electric guitar (clean)\",\n\t\"electric guitar (muted)\",\n\t\"overdriven guitar\",\n\t\"distortion guitar\",\n\t\"guitar harmonics\",\n\t\"acoustic bass\",\n\t\"electric bass (finger)\",\n\t\"electric bass (pick)\",\n\t\"fretless bass\",\n\t\"slap bass 1\",\n\t\"slap bass 2\",\n\t\"synth bass 1\",\n\t\"synth bass 2\",\n\t\"violin\",\n\t\"viola\",\n\t\"cello\",\n\t\"contrabass\",\n\t\"tremolo strings\",\n\t\"pizzicato strings\",\n\t\"orchestral harp\",\n\t\"timpani\",\n\t\"string ensemble 1\",\n\t\"string ensemble 2\",\n\t\"synthstrings 1\",\n\t\"synthstrings 2\",\n\t\"choir aahs\",\n\t\"voice oohs\",\n\t\"synth voice\",\n\t\"orchestra hit\",\n\t\"trumpet\",\n\t\"trombone\",\n\t\"tuba\",\n\t\"muted trumpet\",\n\t\"french horn\",\n\t\"brass section\",\n\t\"synthbrass 1\",\n\t\"synthbrass 2\",\n\t\"soprano sax\",\n\t\"alto sax\",\n\t\"tenor sax\",\n\t\"baritone sax\",\n\t\"oboe\",\n\t\"english horn\",\n\t\"bassoon\",\n\t\"clarinet\",\n\t\"piccolo\",\n\t\"flute\",\n\t\"recorder\",\n\t\"pan flute\",\n\t\"blown bottle\",\n\t\"shakuhachi\",\n\t\"whistle\",\n\t\"ocarina\",\n\t\"lead 1 (square)\",\n\t\"lead 2 (sawtooth)\",\n\t\"lead 3 (calliope)\",\n\t\"lead 4 (chiff)\",\n\t\"lead 5 (charang)\",\n\t\"lead 6 (voice)\",\n\t\"lead 7 (fifths)\",\n\t\"lead 8 (bass + lead)\",\n\t\"pad 1 (new age)\",\n\t\"pad 2 (warm)\",\n\t\"pad 3 (polysynth)\",\n\t\"pad 4 (choir)\",\n\t\"pad 5 (bowed)\",\n\t\"pad 6 (metallic)\",\n\t\"pad 7 (halo)\",\n\t\"pad 8 (sweep)\",\n\t\"fx 1 (rain)\",\n\t\"fx 2 (soundtrack)\",\n\t\"fx 3 (crystal)\",\n\t\"fx 4 (atmosphere)\",\n\t\"fx 5 (brightness)\",\n\t\"fx 6 (goblins)\",\n\t\"fx 7 (echoes)\",\n\t\"fx 8 (sci-fi)\",\n\t\"sitar\",\n\t\"banjo\",\n\t\"shamisen\",\n\t\"koto\",\n\t\"kalimba\",\n\t\"bag pipe\",\n\t\"fiddle\",\n\t\"shanai\",\n\t\"tinkle bell\",\n\t\"agogo\",\n\t\"steel drums\",\n\t\"woodblock\",\n\t\"taiko drum\",\n\t\"melodic tom\",\n\t\"synth drum\",\n\t\"reverse cymbal\",\n\t\"guitar fret noise\",\n\t\"breath noise\",\n\t\"seashore\",\n\t\"bird tweet\",\n\t\"telephone ring\",\n\t\"helicopter\",\n\t\"applause\",\n\t\"gunshot\",\n];\n\nexport const InstrumentFamilyByID = [\n\t\"piano\",\n\t\"chromatic percussion\",\n\t\"organ\",\n\t\"guitar\",\n\t\"bass\",\n\t\"strings\",\n\t\"ensemble\",\n\t\"brass\",\n\t\"reed\",\n\t\"pipe\",\n\t\"synth lead\",\n\t\"synth pad\",\n\t\"synth effects\",\n\t\"world\",\n\t\"percussive\",\n\t\"sound effects\",\n];\n\nexport const DrumKitByPatchID = {\n\t0: \"standard kit\",\n\t8: \"room kit\",\n\t16: \"power kit\",\n\t24: \"electronic kit\",\n\t25: \"tr-808 kit\",\n\t32: \"jazz kit\",\n\t40: \"brush kit\",\n\t48: \"orchestra kit\",\n\t56: \"sound fx kit\",\n};\n","import { MidiNoteEvent } from \"midi-file\";\nimport { Header } from \"./Header\";\n\n/**\n * Convert a midi note into a pitch\n */\nfunction midiToPitch(midi: number): string {\n\tconst octave = Math.floor(midi / 12) - 1;\n\treturn midiToPitchClass(midi) + octave.toString();\n}\n\n/**\n * Convert a midi note to a pitch class (just the pitch no octave)\n */\nfunction midiToPitchClass(midi: number): string {\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\tconst note = midi % 12;\n\treturn scaleIndexToNote[note];\n}\n\n/**\n * Convert a pitch class to a MIDI note\n */\nfunction pitchClassToMidi(pitch: string): number {\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\treturn scaleIndexToNote.indexOf(pitch);\n}\n\n/**\n * Convert a pitch to a midi number\n */\n// tslint:disable-next-line: only-arrow-functions typedef\nconst pitchToMidi: (note: string) => number = (function() {\n\tconst regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\n\tconst noteToScaleIndex = {\n\t\t// tslint:disable-next-line: object-literal-sort-keys\n\t\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\t\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\t\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\t\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\t\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\t\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\t\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n\t};\n\treturn (note) => {\n\t\tconst split = regexp.exec(note);\n\t\tconst pitch = split[1];\n\t\tconst octave = split[2];\n\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\treturn index + (parseInt(octave, 10) + 1) * 12;\n\t};\n}());\n\nconst privateHeaderMap = new WeakMap<Note, Header>();\n\n/**\n * A Note consists of a noteOn and noteOff event\n */\nexport class Note implements NoteInterface {\n\n\t/**\n\t * The notes midi value\n\t */\n\tmidi: number;\n\n\t/**\n\t * The normalized velocity (0-1)\n\t */\n\tvelocity: number;\n\n\t/**\n\t * The velocity of the note off\n\t */\n\tnoteOffVelocity: number;\n\n\t/**\n\t * The start time in ticks\n\t */\n\tticks: number;\n\n\t/**\n\t * The duration in ticks\n\t */\n\tdurationTicks: number;\n\n\tconstructor(noteOn: NoteOnEvent, noteOff: NoteOffEvent, header: Header) {\n\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tthis.midi = noteOn.midi;\n\n\t\tthis.velocity = noteOn.velocity;\n\n\t\tthis.noteOffVelocity = noteOff.velocity;\n\n\t\tthis.ticks = noteOn.ticks;\n\n\t\tthis.durationTicks = noteOff.ticks - noteOn.ticks;\n\t}\n\n\t/**\n\t * The note name and octave in scientific pitch notation, e.g. \"C4\"\n\t */\n\tget name(): string {\n\t\treturn midiToPitch(this.midi);\n\t}\n\n\tset name(n: string) {\n\t\tthis.midi = pitchToMidi(n);\n\t}\n\n\t/**\n\t * The notes octave number\n\t */\n\tget octave(): number {\n\t\treturn Math.floor(this.midi / 12) - 1;\n\t}\n\n\tset octave(o: number) {\n\t\tconst diff = o - this.octave;\n\t\tthis.midi += diff * 12;\n\t}\n\n\t/**\n\t * The pitch class name. e.g. \"A\"\n\t */\n\tget pitch(): string {\n\t\treturn midiToPitchClass(this.midi);\n\t}\n\n\tset pitch(p: string) {\n\t\tthis.midi = 12 * (this.octave + 1) + pitchClassToMidi(p);\n\t}\n\n\t/**\n\t * The duration of the segment in seconds\n\t */\n\tget duration(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks + this.durationTicks) - header.ticksToSeconds(this.ticks);\n\t}\n\n\tset duration(d: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst noteEndTicks = header.secondsToTicks(this.time + d);\n\t\tthis.durationTicks = noteEndTicks - this.ticks;\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\t/**\n\t * The number of measures (and partial measures) to this beat.\n\t * Takes into account time signature changes\n\t * @readonly\n\t */\n\tget bars(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToMeasures(this.ticks);\n\t}\n\n\ttoJSON(): NoteJSON {\n\t\treturn {\n\t\t\tduration: this.duration,\n\t\t\tdurationTicks: this.durationTicks,\n\t\t\tmidi: this.midi,\n\t\t\tname: this.name,\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvelocity: this.velocity,\n\t\t};\n\t}\n}\n\nexport interface NoteJSON {\n\ttime: number;\n\tmidi: number;\n\tname: string;\n\tvelocity: number;\n\tduration: number;\n\tticks: number;\n\tdurationTicks: number;\n}\n\nexport interface NoteOnEvent {\n\tticks: number;\n\tvelocity: number;\n\tmidi: number;\n}\n\nexport interface NoteOffEvent {\n\tticks: number;\n\tvelocity: number;\n}\n\nexport interface NoteInterface {\n\ttime: number;\n\tticks: number;\n\tduration: number;\n\tdurationTicks: number;\n\tmidi: number;\n\tpitch: string;\n\toctave: number;\n\tname: string;\n\tnoteOffVelocity: number;\n\tvelocity: number;\n}\n\ntype PitchDescription = {\n\tname: string;\n} | {\n\tpitch: string;\n\toctave: number;\n} | {\n\tmidi: number;\n}\n\ntype VelocityDescription = {\n\tvelocity?: number;\n\tnoteOffVelocity?: number;\n}\n\ntype TimeDescription = {\n\ttime: number;\n\tduration?: number;\n} | {\n\tticks: number;\n\tdurationTicks?: number;\n}\n\n/**\n * @hidden\n */\nexport type NoteConstructorInterface = PitchDescription & VelocityDescription & TimeDescription\n"],"sourceRoot":""}